<?php

namespace Bakgat\Notos\__CG__\Bakgat\Notos\Domain\Model\Identity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Organization extends \Bakgat\Notos\Domain\Model\Identity\Organization implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\Identity\\Organization' . "\0" . 'domain_name', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\Identity\\Organization' . "\0" . 'avatar', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\Identity\\Organization' . "\0" . 'user_roles', 'id', 'firstName', 'lastName', 'kind', 'references', 'relatedTo');
        }

        return array('__isInitialized__', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\Identity\\Organization' . "\0" . 'domain_name', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\Identity\\Organization' . "\0" . 'avatar', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\Identity\\Organization' . "\0" . 'user_roles', 'id', 'firstName', 'lastName', 'kind', 'references', 'relatedTo');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Organization $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setDomainName(\Bakgat\Notos\Domain\Model\Identity\DomainName $domain_name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDomainName', array($domain_name));

        return parent::setDomainName($domain_name);
    }

    /**
     * {@inheritDoc}
     */
    public function domainName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'domainName', array());

        return parent::domainName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(\Bakgat\Notos\Domain\Model\Identity\Name $name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function name()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'name', array());

        return parent::name();
    }

    /**
     * {@inheritDoc}
     */
    public function setAvatar($avatar)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAvatar', array($avatar));

        return parent::setAvatar($avatar);
    }

    /**
     * {@inheritDoc}
     */
    public function avatar()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'avatar', array());

        return parent::avatar();
    }

    /**
     * {@inheritDoc}
     */
    public function id()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'id', array());

        return parent::id();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstName(\Bakgat\Notos\Domain\Model\Identity\Name $firstName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstName', array($firstName));

        return parent::setFirstName($firstName);
    }

    /**
     * {@inheritDoc}
     */
    public function firstName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'firstName', array());

        return parent::firstName();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastName(\Bakgat\Notos\Domain\Model\Identity\Name $lastName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastName', array($lastName));

        return parent::setLastName($lastName);
    }

    /**
     * {@inheritDoc}
     */
    public function lastName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'lastName', array());

        return parent::lastName();
    }

    /**
     * {@inheritDoc}
     */
    public function fullName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fullName', array());

        return parent::fullName();
    }

    /**
     * {@inheritDoc}
     */
    public function setKind(\Bakgat\Notos\Domain\Model\Kind $kind)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKind', array($kind));

        return parent::setKind($kind);
    }

    /**
     * {@inheritDoc}
     */
    public function kind()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'kind', array());

        return parent::kind();
    }

    /**
     * {@inheritDoc}
     */
    public function references()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'references', array());

        return parent::references();
    }

    /**
     * {@inheritDoc}
     */
    public function relatedTo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'relatedTo', array());

        return parent::relatedTo();
    }

}
