<?php

namespace Bakgat\Notos\__CG__\Bakgat\Notos\Domain\Model\ACL;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Role extends \Bakgat\Notos\Domain\Model\ACL\Role implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'id', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'name', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'slug', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'description', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'permissions', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'user_roles', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'createdAt', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'updatedAt', 'cacheInherit');
        }

        return array('__isInitialized__', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'id', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'name', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'slug', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'description', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'permissions', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'user_roles', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'createdAt', '' . "\0" . 'Bakgat\\Notos\\Domain\\Model\\ACL\\Role' . "\0" . 'updatedAt', 'cacheInherit');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Role $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function id()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'id', array());

        return parent::id();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function name()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'name', array());

        return parent::name();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', array($slug));

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function slug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'slug', array());

        return parent::slug();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function description()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'description', array());

        return parent::description();
    }

    /**
     * {@inheritDoc}
     */
    public function permissions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'permissions', array());

        return parent::permissions();
    }

    /**
     * {@inheritDoc}
     */
    public function getPermissions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPermissions', array());

        return parent::getPermissions();
    }

    /**
     * {@inheritDoc}
     */
    public function can($permission, $operator = NULL, $mergePermissions = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'can', array($permission, $operator, $mergePermissions));

        return parent::can($permission, $operator, $mergePermissions);
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', array());

        return parent::prePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function preUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpdate', array());

        return parent::preUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function assignPermission(\Bakgat\Notos\Domain\Model\ACL\Permission $permission)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'assignPermission', array($permission));

        return parent::assignPermission($permission);
    }

    /**
     * {@inheritDoc}
     */
    public function revokePermission(\Bakgat\Notos\Domain\Model\ACL\Permission $permission)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'revokePermission', array($permission));

        return parent::revokePermission($permission);
    }

    /**
     * {@inheritDoc}
     */
    public function syncPermissions(array $permissions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'syncPermissions', array($permissions));

        return parent::syncPermissions($permissions);
    }

    /**
     * {@inheritDoc}
     */
    public function revokeAllPermissions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'revokeAllPermissions', array());

        return parent::revokeAllPermissions();
    }

}
