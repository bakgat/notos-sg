!function(){"use strict";angular.module("notos",["notos.core","notos.layout","notos.data","notos.widgets","notos.dashboard","notos.websites","notos.filter"])}(),angular.module("notos.core",["ngAnimate","ngSanitize","ngResource","ui.bootstrap","ncy-angular-breadcrumb","restangular","blocks.exception","blocks.logger","blocks.router"]),function(){"use strict";angular.module("notos.dashboard",[])}(),function(){"use strict";angular.module("notos.data",[])}(),function(){"use strict";angular.module("notos.filter",[])}(),function(){"use strict";angular.module("notos.layout",[])}(),function(){"use strict";angular.module("notos.websites",[])}(),function(){"use strict";angular.module("notos.widgets",[])}(),function(){"use strict";angular.module("blocks.exception",["blocks.logger"])}(),function(){"use strict";angular.module("blocks.logger",[])}(),function(){"use strict";angular.module("blocks.router",["ui.router"])}(),function(){"use strict";function t(){function t(t){var e,o,r,i,a,s="",u="",c="",l=0;do e=t.charCodeAt(l++),o=t.charCodeAt(l++),u=t.charCodeAt(l++),r=e>>2,i=(3&e)<<4|o>>4,a=(15&o)<<2|u>>6,c=63&u,isNaN(o)?a=c=64:isNaN(u)&&(c=64),s=s+n.charAt(r)+n.charAt(i)+n.charAt(a)+n.charAt(c),e=o=u="",r=i=a=c="";while(l<t.length);return s}function e(t){var e,o,r,i,a,s="",u="",c="",l=0,f=/[^A-Za-z0-9\+\/\=]/g;f.exec(t)&&window.alert("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding."),t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"");do r=n.indexOf(t.charAt(l++)),i=n.indexOf(t.charAt(l++)),a=n.indexOf(t.charAt(l++)),c=n.indexOf(t.charAt(l++)),e=r<<2|i>>4,o=(15&i)<<4|a>>2,u=(3&a)<<6|c,s+=String.fromCharCode(e),64!=a&&(s+=String.fromCharCode(o)),64!=c&&(s+=String.fromCharCode(u)),e=o=u="",r=i=a=c="";while(l<t.length);return s}var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",o={encode:t,decode:e};return o}angular.module("notos.core").factory("Base64",t)}(),function(){"use strict";function t(t,e,n,o){function r(){return e.$broadcast.apply(e,arguments)}function i(t){return/^[-]?\d+$/.test(t)}function a(t,e){return t&&-1!==t.toLowerCase().indexOf(e.toLowerCase())}var s={$broadcast:r,$q:t,$timeout:n,isNumber:i,logger:o,textContains:a};return s}angular.module("notos.core").factory("common",t),t.$inject=["$q","$rootScope","$timeout","logger"]}(),function(){"use strict";function t(t){t.options.timeOut=4e3,t.options.closeButton=!0,t.options.progressBar=!0,t.options.positionClass="toast-bottom-right"}function e(t,e,n,o,r){function a(){n.config.$urlRouterProvider=t,n.config.$stateProvider=e,n.config.title=i.appTitle}function s(){o.setOptions({prefixStateName:"index",template:"bootstrap3",includeAbstract:!0})}function u(){var t="/api";r.setBaseUrl(t)}a(),s(),u()}function n(t){t.$on("$viewContentLoaded",function(){angular.element("html, body").animate({scrollTop:0},200)})}function o(t){t.$on("$stateChangeError",function(t){t.preventDefault(),$state.go("error.404")})}var r=angular.module("notos.core");r.config(t),t.$inject=["toastr"];var i={appErrorPrefix:"[Fout] ",appTitle:"noTos",version:"1.0.0"};r.value("config",i),r.config(e),r.run(n),r.run(o),e.$inject=["$urlRouterProvider","$stateProvider","routehelperConfigProvider","$breadcrumbProvider","RestangularProvider"],n.$inject=["$rootScope"],o.$inject=["$rootScope"]}(),function(){"use strict";angular.module("notos.core").constant("toastr",toastr).constant("moment",moment).constant("_",window._)}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"error",config:{"abstract":!0,url:"/error",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"Fout"}},{state:"error.404",config:{url:"/404",views:{"content@error":{templateUrl:"js/modules/core/errors/404.html"}},title:"Pagina niet gevonden"}}]}angular.module("notos.core").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t,e,n,o,r,i){function a(){w.loadingMain=!0,w.loadingLevels=!0,w.loadingTags=!0,s(),u(),c().then(function(){m()})}function s(){function t(t){return w.tags=t,w.loadingTags=!1,w.tags}return e.getList().then(t)}function u(){function t(t){return w.levels=t,w.loadingLevels=!1,w.levels}return o.getList().then(t)}function c(){function t(t){return w.websites=i("orderBy")(t,"id",!0),w.loadingMain=!1,w.websites}return n.full().then(t)}function l(t){w.filter.levels.push(t);var e=w.levels.indexOf(t);w.levels.splice(e,1)}function f(t){w.levels.push(t);var e=w.filter.levels.indexOf(t);w.filter.levels.splice(e,1)}function g(t){w.filter.tags.push(t);var e=w.tags.indexOf(t);w.tags.splice(e,1)}function d(t){w.tags.push(t);var e=w.filter.tags.indexOf(t);w.filter.tags.splice(e,1)}function m(){w.filterFlag=w.filter.levels.length||w.filter.tags.length||w.filter.terms,w.filterFlag||(w.filtered=w.websites),w.totalItems=w.filtered.length,h()}function h(){var t=w.filtered.length,e=(w.currentPage-1)*w.itemsPerPage+1,n=e+(w.itemsPerPage-1);n>t&&(n=t),t>0&&t>w.itemsPerPage?w.paginationText="Toont "+e+(t>1?" -  "+n:"")+" (van "+t+" websites)":w.paginationText=""}function p(){for(;!w.randomSite||!w.randomSite.image;)$=Math.floor(Math.random()*w.websites.length),w.randomSite=w.websites[$];return w.randomSite}function v(){angular.element("html, body").animate({scrollTop:0},500)}function b(){n.suggest(w.idea),w.submitIdea=!1,w.acceptedIdea=!0}var $=-1,w=this;w.websites=[],w.filtered=[],w.tags=[],w.levels=[],w.filter={levels:[],tags:[],terms:""},w.addLevelFilter=l,w.removeLevelFilter=f,w.addTagFilter=g,w.removeTagFilter=d,w.randomSite=null,w.tagLimit=3,w.levelLimit=3,w.levelCollapsed=!0,w.tagCollapsed=!0,w.filterFlag=!1,w.itemsPerPage=10,w.currentPage=1,w.totalItems=0,w.pageChanged=v,w.idea={url:null,description:null},w.submitIdea=!1,w.acceptedIdea=!1,w.sendIdea=b,a(),t.$watch("vm.filter",function(t){w.websites.length&&(w.filtered=r(w.websites,w.filter)),m()},!0),t.$watchGroup(["vm.currentPage","vm.totalItems","vm.itemsPerPage"],function(){h()}),t.$watch("vm.websites",function(){w.websites.length&&p()})}angular.module("notos.dashboard").controller("DashboardController",t),t.$inject=["$scope","Tag","Website","Level","SearchWebsiteFilter","$filter"]}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"index",config:{"abstract":!0,url:"/index",views:{"main@":{templateUrl:"js/modules/layout/main.html"}},title:"start"}},{state:"index.dashboard",config:{url:"/dashboard",views:{"content@index":{templateUrl:"js/modules/dashboard/dashboard.html",controller:"DashboardController",controllerAs:"vm"}},title:"Dashboard"}}]}angular.module("notos.dashboard").run(t),t.$inject=["routehelper"]}(),function(){"use strict";function t(t){return function(e,n){if(""===n)return t.trustAsHtml(e);n=n.split(" "),n.sort(function(t,e){return e.length-t.length});var o=new RegExp("(?!<[^>]*?>)"+n.join("|")+"(?![^<]*?</[^>]*?>)","gi");return t.trustAsHtml(e.replace(o,'<span class="match">$&</span>'))}}angular.module("notos.data").filter("Highlight",t),t.$inject=["$sce"]}(),function(){"use strict";function t(t,e){var n;return n=e("http"),t.withConfig(function(t){t.setDefaultHttpFields({cache:n}),t.setResponseInterceptor(function(t,e){return("put"===e||"post"===e||"delete"===e)&&n.removeAll(),t}),t.setOnElemRestangularized(function(t,e){return t.clearCache=function(){n.removeAll()},t})})}angular.module("notos.data").factory("HTTPCache",t),t.$inject=["Restangular","$cacheFactory"]}(),function(){"use strict";function t(t){var e=t.service("group").one("levels");return e}angular.module("notos.filter").factory("Level",t),t.$inject=["HTTPCache"]}(),function(){"use strict";function t(t){var e=t.service("tags").one("type").one("website");return e}angular.module("notos.filter").factory("Tag",t),t.$inject=["HTTPCache"]}(),function(){"use strict";function t(){function t(){}t()}angular.module("notos.layout").controller("ShellController",t)}(),function(){"use strict";function t(t){return function(e,n){function o(t,e){-1===e.indexOf(t)&&e.push(t)}function r(e,n){return e&&t.contains(e.toLowerCase(),n.toLowerCase())}function i(e,n){return e&&t.contains(e.toLowerCase(),n.toLowerCase())}function a(e,n){return t.some(e,function(e){return e&&(t.contains(e.code.toLowerCase(),n.toLowerCase())||t.contains(e.name.toLowerCase(),n.toLowerCase()))})}function s(e,n){return t.some(e,function(e){return e&&t.contains(e.name.toLowerCase(),n.toLowerCase())})}var u=[],c=""===n.terms?null:n.terms.split(" "),l=n.tags,f=n.levels,g=[];return angular.forEach(e,function(e){l.length&&angular.forEach(e.tags,function(n){t.some(l,function(t){return t.id===n.id})&&o(e,g)})}),e=l.length?g:e,f.length&&(g=[],angular.forEach(e,function(e){t.any(f,function(n){return t.any(e.objectives,function(e){return t.some(e.levels,function(t){return t.level>0&&t.group.id===n.p_id})})})&&o(e,g)})),e=l.length||f.length?g:e,c?angular.forEach(e,function(e){t.some(c,function(t){return r(e.name,t)||i(e.description,t)||a(e.objectives,t)||s(e.tags,t)})&&o(e,u)}):u=g,u}}angular.module("notos.websites").filter("SearchWebsite",t),t.$inject=["_"]}(),function(){"use strict";function t(t){function e(){return t.service("websites").getList()}function n(){return t.service("websites").one("full").getList()}function o(e){return t.one("websites").post("suggest",e)}var r={full:n,getList:e,suggest:o};return r}angular.module("notos.websites").factory("Website",t),t.$inject=["HTTPCache"]}(),function(){"use strict";function t(){this.config={appErrorPrefix:void 0},this.configure=function(t){this.config.appErrorPrefix=t},this.$get=function(){return{config:this.config}}}function e(t){t.decorator("$exceptionHandler",n)}function n(t,e,n){return function(o,r){var i=e.config.appErrorPrefix||"",a={exception:o,cause:r};o.message=i+o.message,t(o,r),n.error(o.message,a)}}angular.module("blocks.exception").provider("exceptionHandler",t).config(e),e.$inject=["$provide"],n.$inject=["$delegate","exceptionHandler","logger"]}(),function(){"use strict";function t(t){function e(e){return function(n){t.error(e,n)}}var n={catcher:e};return n}angular.module("blocks.exception").factory("exception",t),t.$inject=["logger"]}(),function(){"use strict";function t(t,e){function n(n,o,r){e.error(n,r),t.error("Fout: "+n,o)}function o(n,o,r){e.info(n,r),t.info("Info: "+n,o)}function r(n,o,r){e.success(n,r),t.info("Succes: "+n,o)}function i(n,o,r){e.warning(n,r),t.warn("Let op: "+n,o)}function a(n,o,r){e.warning(n,r),t.warn("Verwijderd: "+n,o)}function s(n,o,r){e.success(n,r),t.info("Bewaard: "+n,o)}var u={showToasts:!0,error:n,info:o,success:r,warning:i,removed:a,saved:s,log:t.log};return u}angular.module("blocks.logger").factory("logger",t),t.$inject=["$log","toastr"]}(),function(){"use strict";function t(){this.config={},this.$get=function(){return{config:this.config}}}function e(t,e,n){function o(t){t.forEach(function(t){t.config.title&&(t.config.ncyBreadcrumb={label:t.config.title.toLowerCase()}),c.state(t.state,t.config)})}function r(){return n.get()}function i(t){var e=null;return r().forEach(function(n){n.name===t&&(e=n)}),e}function a(){s(),u.otherwise("/index/dashboard")}function s(){e.$on("$stateChangeSuccess",function(n,o,r){var i=t.config.title+(o.title?" | "+o.title:"");e.title=i,e.$state=o})}var u=t.config.$urlRouterProvider,c=t.config.$stateProvider,l={configureStates:o,states:r,get:i};return a(),l}angular.module("blocks.router").provider("routehelperConfig",t).factory("routehelper",e),e.$inject=["routehelperConfig","$rootScope","$state"]}(),function(){"use strict";function t(){function t(t,e,n){var o=angular.element('<i class="fa" />'),r=n.name.split(" ");angular.forEach(r,function(t){o.addClass("fa-"+t)}),e.replaceWith(o)}var e={restrict:"E",link:t};return e}angular.module("notos.widgets").directive("ntFa",t),t.$inject=[]}(),function(){"use strict";function t(t){function e(e,n,o){var r=angular.element("<pagination />");r.attr("data-boundary-links",!0),r.attr("data-total-items","totalItems"),r.attr("data-items-per-page","itemsPerPage"),r.attr("data-max-size",5),r.attr("data-ng-model","currentPage"),r.attr("data-previous-text","‹"),r.attr("data-next-text","›"),r.attr("data-first-text","«"),r.attr("data-last-text","»"),r.attr("data-ng-hide","hide"),o["class"]&&r.attr("class",o["class"]),t(r)(e),n.replaceWith(r)}function n(t){var e=this;e.hide=!1,e.itemsPerPage=10,e.currentPge=0,t.$watch("vm.totalItems",function(){e.hide=e.totalItems<=e.itemsPerPage})}var o={restrict:"EA",scope:{totalItems:"=",itemsPerPage:"=",currentPage:"="},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$scope"],o}angular.module("notos.widgets").directive("ntPagination",t),t.$inject=["$compile"]}(),function(){"use strict";function t(){return function(t,e){return t?(e=parseInt(e,10),t.slice(e)):[]}}angular.module("notos.widgets").filter("offset",t)}();
//# sourceMappingURL=data:application/json;base64,