(function () {
    'use strict';

    angular
        .module('notos', [
            //shared modules
            'notos.core',
            'notos.layout',
            'notos.data',
            'notos.widgets',

            //app modules
            'notos.dashboard',
            'notos.websites',
            'notos.tags'
        ]);
})();
angular
    .module('notos.core', [
        //Angular
        'ngAnimate', 'ngSanitize', 'ngResource',

        //3rd party
        'ui.bootstrap',
        'ncy-angular-breadcrumb',
        'restangular',

        //cross app modules
        'blocks.exception',
        'blocks.logger',
        'blocks.router'
    ]);
(function () {
    'use strict';

    angular
        .module('notos.dashboard', []);
})();
(function () {
    'use strict';

    angular
        .module('notos.data', []);
})();
(function () {
    'use strict';

    angular
        .module('notos.layout', []);
})();
(function () {
    'use strict';

    angular
        .module('notos.tags', []);
})();
(function () {
    'use strict';

    angular
        .module('notos.websites', []);
})();
(function () {
    'use strict';

    angular
        .module('notos.widgets', []);
})();
(function () {
    'use strict';

    angular
        .module('blocks.exception', ['blocks.logger']);
})();
(function () {
    'use strict';

    angular
        .module('blocks.logger', []);
})();
(function () {
    'use strict';

    angular
        .module('blocks.router', [
            'ui.router'
        ]);
})();
/**
 * notos.core
 * FACTORY: Base64
 */

(function () {
    'use strict';

    angular
        .module('notos.core')
        .factory('Base64', Base64);

    /* @ngInject */
    function Base64() {
        var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        var service = {
            encode: encode,
            decode: decode
        }

        return service;
        ////////////////

        function encode(input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;

            do {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);

                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }

                output = output +
                    keyStr.charAt(enc1) +
                    keyStr.charAt(enc2) +
                    keyStr.charAt(enc3) +
                    keyStr.charAt(enc4);
                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";
            } while (i < input.length);

            return output;
        }

        function decode(input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;

            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
            var base64test = /[^A-Za-z0-9\+\/\=]/g;
            if (base64test.exec(input)) {
                window.alert("There were invalid base64 characters in the input text.\n" +
                    "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                    "Expect errors in decoding.");
            }
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            do {
                enc1 = keyStr.indexOf(input.charAt(i++));
                enc2 = keyStr.indexOf(input.charAt(i++));
                enc3 = keyStr.indexOf(input.charAt(i++));
                enc4 = keyStr.indexOf(input.charAt(i++));

                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;

                output = output + String.fromCharCode(chr1);

                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }

                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";

            } while (i < input.length);

            return output;
        }
    };
})();
/**
 * notos.core
 * FACTORY: common
 */

(function () {
    'use strict';

    angular
        .module('notos.core')
        .factory('common', common);

    function common($q, $rootScope, $timeout, logger) {

        var service = {
            // common angular dependencies
            $broadcast: $broadcast,
            $q: $q,
            $timeout: $timeout,
            // generic
            isNumber: isNumber,
            logger: logger,
            textContains: textContains
        }

        return service;
        ////////////////////////

        function $broadcast() {
            return $rootScope.$broadcast.apply($rootScope, arguments);
        }


        function isNumber(val) {
            // negative or positive
            return (/^[-]?\d+$/).test(val);
        }

        function textContains(text, searchText) {
            return text && -1 !== text.toLowerCase().indexOf(searchText.toLowerCase());
        }
    }
    common.$inject = ["$q", "$rootScope", "$timeout", "logger"];
})();
(function () {
    'use strict';

    var core = angular.module('notos.core');

    core.config(toastrConfig);

    /* @ngInject */
    function toastrConfig(toastr) {
        toastr.options.timeOut = 4000;
        toastr.options.closeButton = true;
        toastr.options.progressBar = true;
        toastr.options.positionClass = 'toast-bottom-right';
    }
    toastrConfig.$inject = ["toastr"];

    var config = {
        appErrorPrefix: '[Fout] ',
        appTitle: 'noTos',
        version: '1.0.0'
    };

    core.value('config', config);

    core.config(configure);

    core.run(afterViewContentLoaded);

    core.run(set404);


    /* @ngInject */
    function configure($urlRouterProvider, $stateProvider,
                       routehelperConfigProvider, $breadcrumbProvider,
                       RestangularProvider) {

        configureRouting();
        configureBreadcrumb();

        configureRestangular();

        function configureRouting() {
            routehelperConfigProvider.config.$urlRouterProvider = $urlRouterProvider;
            routehelperConfigProvider.config.$stateProvider = $stateProvider;

            routehelperConfigProvider.config.title = config.appTitle;
        }

        function configureBreadcrumb() {
            $breadcrumbProvider.setOptions({
                prefixStateName: 'index',
                template: 'bootstrap3',
                includeAbstract: true
            });
        }

        function configureRestangular() {
            var baseUrl = '/api';

            RestangularProvider.setBaseUrl(baseUrl);
        }


    }
    configure.$inject = ["$urlRouterProvider", "$stateProvider", "routehelperConfigProvider", "$breadcrumbProvider", "RestangularProvider"];

    /* @ngInject */
    function afterViewContentLoaded($rootScope) {
        $rootScope.$on('$viewContentLoaded',function(){
            angular.element('html, body').animate({ scrollTop: 0 }, 200);
        })
    }
    afterViewContentLoaded.$inject = ["$rootScope"];

    /* @ngInject */
    function set404($rootScope) {
        $rootScope.$on('$stateChangeError', function(event) {
            event.preventDefault();
            $state.go('error.404');
        });
    }
    set404.$inject = ["$rootScope"];

})();
/* global toastr:false, moment:false */
(function() {
    'use strict';

    angular
        .module('notos.core')
        .constant('toastr', toastr)
        .constant('moment', moment)
        .constant('_', window._);
})();
/**
 * ROUTES: notos.core
 */
(function () {
    'use strict';

    angular
        .module('notos.core')
        .run(configRoutes);

    /* @ngInject */
    function configRoutes(routehelper) {
        routehelper.configureStates(getStates());
    }
    configRoutes.$inject = ["routehelper"];;

    function getStates() {
        return [
            {
                state: 'error',
                config: {
                    abstract: true,
                    url: '/error',
                    views: {
                        'main@': {
                            templateUrl: 'js/modules/layout/main.html'
                        }
                    },
                    title: 'Fout'
                }
            },
            {
                state: 'error.404',
                config: {
                    url: '/404',
                    views: {
                        'content@error': {
                            templateUrl: 'js/modules/core/errors/404.html'
                        },
                    },
                    title: 'Pagina niet gevonden'
                }
            }
        ];
    };
})();
/**
 * notos.dashboard
 * CONTROLLER: DashboardController
 */
(function () {
    'use strict';

    angular
        .module('notos.dashboard')
        .controller('DashboardController', DashboardController);

    /* @ngInject */
    function DashboardController($scope, Tag, Website, Level,
                                 SearchWebsiteFilter) {
        /*jshint validthis: true */
        var vm = this;

        vm.websites = [];
        vm.filtered = [];
        vm.tags = [];
        vm.levels = [];

        vm.filter = {
            levels: [],
            tags: [],
            terms: ''
        }

        vm.addLevelFilter = addLevelFilter;
        vm.removeLevelFilter = removeLevelFilter;
        vm.addTagFilter = addTagFilter;
        vm.removeTagFilter = removeTagFilter;

        vm.filterFlag = false;

        vm.itemsPerPage = 10;
        vm.currentPage = 1;
        vm.totalItems = 0;


        activate();
        ///////////

        function activate() {
            getTags();
            getLevels();
            getWebsites().then(function () {
                setFilterFlag();
            });


        }

        function getTags() {
            return Tag.getList().then(tagsCompleted);

            function tagsCompleted(response) {
                return vm.tags = response;
            }
        }

        function getLevels() {
            return Level.getList().then(levelCompleted);

            function levelCompleted(response) {
                return vm.levels = response;
            }
        }

        function getWebsites() {
            return Website.full().then(websitesCompleted);

            function websitesCompleted(response) {
                return vm.websites = response;
            }
        }

        function addLevelFilter(level) {
            vm.filter.levels.push(level);
            var index = vm.levels.indexOf(level);
            vm.levels.splice(index, 1);
        }

        function removeLevelFilter(level) {
            vm.levels.push(level);
            var index = vm.filter.levels.indexOf(level);
            vm.filter.levels.splice(index, 1);
        }

        function addTagFilter(tag) {
            vm.filter.tags.push(tag);
            var index = vm.tags.indexOf(tag);
            vm.tags.splice(index, 1);
        }

        function removeTagFilter(tag) {
            vm.tags.push(tag);
            var index = vm.filter.tags.indexOf(tag);
            vm.filter.tags.splice(index, 1);
        }

        $scope.$watch('vm.filter', function (tags) {
            if (vm.websites.length) {
                var websites = [];
                vm.filtered = SearchWebsiteFilter(vm.websites, vm.filter);
            }
            setFilterFlag();
        }, true);

        $scope.$watchGroup(['vm.currentPage', 'vm.totalItems', 'vm.itemsPerPage'], function () {
            setPaginationText();
        });


        function setFilterFlag() {
            vm.filterFlag = vm.filter.levels.length ||
                vm.filter.tags.length ||
                vm.filter.terms;

            if (!vm.filterFlag) {
                vm.filtered = vm.websites;
            }
            vm.totalItems = vm.filtered.length;

            setPaginationText();
        }

        function setPaginationText() {
            var total = vm.filtered.length;
            var floor = ((vm.currentPage - 1) * vm.itemsPerPage) + 1;
            var ceil = floor + (vm.itemsPerPage - 1);
            if (ceil > total) {
                ceil = total;
            }

            if (total > 0 && total > vm.itemsPerPage) {
                vm.paginationText = 'Toont ' + floor +
                    (total > 1 ? ' - ' + ' ' + ceil : '') +
                    ' (van ' + total + ' websites)';
            } else {
                vm.paginationText = '';
            }
        }
    }
    DashboardController.$inject = ["$scope", "Tag", "Website", "Level", "SearchWebsiteFilter"];
})();
/**
 * ROUTES: notos.dashboard
 */
(function () {
    'use strict';

    angular
        .module('notos.dashboard')
        .run(configRoutes);

    /* @ngInject */
    function configRoutes(routehelper) {
        routehelper.configureStates(getStates());
    }
    configRoutes.$inject = ["routehelper"];;

    function getStates() {
        return [
            {
                state: 'index',
                config: {
                    abstract: true,
                    url: '/index',
                    views: {
                        'main@': {
                            templateUrl: 'js/modules/layout/main.html'
                        }
                    },
                    title: 'start'
                }
            },
            {
                state: 'index.dashboard',
                config: {
                    url: '/dashboard',
                    views: {
                        'content@index': {
                            templateUrl: 'js/modules/dashboard/dashboard.html',
                            controller: 'DashboardController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Dashboard'
                }
            }
        ];
    };
})();
/**
 * notos.data
 * FILTER: Highlight
 */
(function () {
    'use strict';

    angular
        .module('notos.data')
        .filter('Highlight', Highlight);

    /**
     *
     */
    function Highlight($sce) {
        return function (str, termsToHighlight) {
            if (termsToHighlight === '') {
                return $sce.trustAsHtml(str);
            }
            // Sort terms by length
            termsToHighlight = termsToHighlight.split(" ");
            termsToHighlight.sort(function (a, b) {
                return b.length - a.length;
            });

            // Regex to simultaneously replace terms
            var regex = new RegExp('(?!<[^>]*?>)' + termsToHighlight.join('|') + '(?![^<]*?</[^>]*?>)', 'gi');
            return $sce.trustAsHtml(str.replace(regex, '<span class="match">$&</span>'));
        };
    }
    Highlight.$inject = ["$sce"];

})();
/**
 * notos.data
 * FACTORY: HTTPCache
 */

(function () {
    'use strict';

    angular
        .module('notos.data')
        .factory('HTTPCache', HTTPCache);

    /* @ngInject */
    function HTTPCache(Restangular, $cacheFactory) {
        var cache;
        cache = $cacheFactory('http');

        return Restangular.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setDefaultHttpFields({cache: cache});
            RestangularConfigurer.setResponseInterceptor(function (response, operation) {
                if (operation === 'put' || operation === 'post' || operation === 'delete') {
                    cache.removeAll();
                }
                return response;
            });

            // Custom Global Method(s) for Restangularized Elements.
            RestangularConfigurer.setOnElemRestangularized(function(elem, isCollection) {
                elem.clearCache = function() {
                    cache.removeAll();
                }
                return elem;
            });
        });
    }
    HTTPCache.$inject = ["Restangular", "$cacheFactory"];
})();
/**
 * notos.layout
 * CONTROLLER: ShellController
 */
(function () {
    'use strict';

    angular
        .module('notos.layout')
        .controller('ShellController', ShellController);

    /* @ngInject */
    function ShellController() {
        /*jshint validthis: true */
        var vm = this;


        activate();
        /////////////


        function activate() {

        }


    }


})();
/**
 * notos.tags
 * FACTORY: Tag
 */

(function () {
    'use strict';

    angular
        .module('notos.tags')
        .factory('Tag', Tag);

    /* @ngInject */
    function Tag(HTTPCache) {
        var service = HTTPCache.service('tags');

        return service;

    }
    Tag.$inject = ["HTTPCache"];
})();
/**
 * notos.websites
 * FILTER: SearchWebsite
 */
(function () {
    'use strict';

    angular
        .module('notos.websites')
        .filter('SearchWebsite', SearchWebsite);

    /**
     *
     */
    function SearchWebsite(_) {
        return function (websites, filter) {
            var filtered = [];
            var terms = filter.terms === '' ? null : filter.terms.split(' ');
            var tags = filter.tags;
            var levels = filter.levels;

            var tmp = [];

            angular.forEach(websites, function (website) {
                //FIRST filter by Tags AND Levels (AND operator)
                //check tags
                if (tags.length) {
                    angular.forEach(website.tags, function (tag) {
                        //tag selected
                        if (_.some(tags, function (t) {
                                return t.id === tag.id;
                            })) {
                            addUnique(website, tmp);
                        }
                    });
                }
            });

            websites = tags.length ? tmp : websites;
            if (levels.length) {
                tmp = [];
                angular.forEach(websites, function (website) {
                    //check objective levels

                    if (_.any(levels, function (level) {
                            return _.any(website.objectives, function (objective) {
                                return _.some(objective.levels, function (l) {
                                    return l.level > 0 && l.group.id === level.id;
                                })
                            });
                        })) {
                        addUnique(website, tmp);
                    }
                });
            }

            //Within these results filter by terms (OR operator)
            websites = tags.length || levels.length ? tmp : websites;
            if (terms) {
                angular.forEach(websites, function (website) {
                        //check name and description
                        if (_.some(terms, function (t) {
                                return nameContainsTerm(website.name, t) ||
                                    descriptionContainsTerm(website.description, t) ||
                                    objectivesContainsTerm(website.objectives, t);
                            })) {
                            addUnique(website, filtered);
                        }
                    }
                );
            } else {
                filtered = tmp;
            }

            return filtered;

            function addUnique(website, list) {
                if (list.indexOf(website) === -1) {
                    list.push(website);
                }
            }

            function nameContainsTerm(name, term) {
                return name && _.contains(name.toLowerCase(), term.toLowerCase());
            }

            function descriptionContainsTerm(description, term) {
                return description && _.contains(description.toLowerCase(), term.toLowerCase());
            }

            function objectivesContainsTerm(objectives, term) {
                return _.some(objectives, function (o) {
                    return o && (_.contains(o.code.toLowerCase(), term.toLowerCase()) ||
                        _.contains(o.name.toLowerCase(), term.toLowerCase()));
                });
            }
        }


    }
    SearchWebsite.$inject = ["_"];
})
();
/**
 * notos.websites
 * FACTORY: Website
 */

(function () {
    'use strict';

    angular
        .module('notos.websites')
        .factory('Website', Website);

    /* @ngInject */
    function Website(HTTPCache) {

        var service = {
            full: full,
            getList: getList
        };

        return service;
        ///////////////////

        function getList() {
            return HTTPCache.service('websites').getList();
        }

        function full() {
            return HTTPCache.service('websites').one('full').getList();
        }
    }
    Website.$inject = ["HTTPCache"];
})();
// Include in index.html so that app level exceptions are handled.
// Exclude from testRunner.html which should run exactly what it wants to run
(function() {
    'use strict';

    angular
        .module('blocks.exception')
        .provider('exceptionHandler', exceptionHandlerProvider)
        .config(config);

    /**
     * Must configure the exception handling
     * @return {[type]}
     */
    function exceptionHandlerProvider() {
        /* jshint validthis:true */
        this.config = {
            appErrorPrefix: undefined
        };

        this.configure = function (appErrorPrefix) {
            this.config.appErrorPrefix = appErrorPrefix;
        };

        this.$get = function() {
            return {config: this.config};
        };
    }

    /**
     * Configure by setting an optional string value for appErrorPrefix.
     * Accessible via config.appErrorPrefix (via config value).
     * @param  {[type]} $provide
     * @return {[type]}
     * @ngInject
     */
    function config($provide) {
        $provide.decorator('$exceptionHandler', extendExceptionHandler);
    }
    config.$inject = ["$provide"];

    /**
     * Extend the $exceptionHandler service to also display a toast.
     * @param  {Object} $delegate
     * @param  {Object} exceptionHandler
     * @param  {Object} logger
     * @return {Function} the decorated $exceptionHandler service
     */
    function extendExceptionHandler($delegate, exceptionHandler, logger) {
        return function(exception, cause) {
            var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';
            var errorData = {exception: exception, cause: cause};
            exception.message = appErrorPrefix + exception.message;
            $delegate(exception, cause);
            /**
             * Could add the error to a service's collection,
             * add errors to $rootScope, log errors to remote web server,
             * or log locally. Or throw hard. It is entirely up to you.
             * throw exception;
             *
             * @example
             *     throw { message: 'error message we added' };
             */
            logger.error(exception.message, errorData);
        };
    }
    extendExceptionHandler.$inject = ["$delegate", "exceptionHandler", "logger"];
})();
/**
 * blocks.exception
 * FACTORY: exception
 */

(function () {
    'use strict';

    angular
        .module('blocks.exception')
        .factory('exception', exception);

    /* @ngInject */
    function exception(logger) {
        var service = {
            catcher: catcher
        };
        return service;

        function catcher(message) {
            return function(reason) {
                logger.error(message, reason);
            };
        }
    }
    exception.$inject = ["logger"];
})();
/**
 * blocks.logger
 * FACTORY: logger
 */

(function () {
    'use strict';

    angular
        .module('blocks.logger')
        .factory('logger', logger);

    logger.$inject = ['$log', 'toastr'];

    function logger($log, toastr) {
        var service = {
            showToasts: true,

            error: error,
            info: info,
            success: success,
            warning: warning,

            removed: removed,
            saved: saved,

            // straight to console; bypass toastr
            log: $log.log
        };

        return service;
        /////////////////////

        function error(message, data, title) {
            toastr.error(message, title);
            $log.error('Fout: ' + message, data);
        }

        function info(message, data, title) {
            toastr.info(message, title);
            $log.info('Info: ' + message, data);
        }

        function success(message, data, title) {
            toastr.success(message, title);
            $log.info('Succes: ' + message, data);
        }

        function warning(message, data, title) {
            toastr.warning(message, title);
            $log.warn('Let op: ' + message, data);
        }

        function removed(message, data, title) {
            toastr.warning(message, title);
            $log.warn('Verwijderd: ' + message, data);
        }

        function saved(message, data, title) {
            toastr.success(message, title);
            $log.info('Bewaard: ' + message, data);
        }
    }
})();
/**
 * notosplus.router
 * FACTORY: routehelper
 */

(function () {
    'use strict';

    angular
        .module('blocks.router')
        .provider('routehelperConfig', routehelperConfig)
        .factory('routehelper', routehelper);

    routehelper.$inject = ['routehelperConfig', '$rootScope', '$state'];

    function routehelperConfig() {
        /* jshint validthis:true */
        this.config = {};

        this.$get = function () {
            return {
                config: this.config
            };
        };
    }

    function routehelper(routehelperConfig, $rootScope, $state) {
        var $urlRouterProvider = routehelperConfig.config.$urlRouterProvider;
        var $stateProvider = routehelperConfig.config.$stateProvider;

        var service = {
            configureStates: configureStates,
            states: states,
            get: get
        };

        init();

        return service;
        //////////////////

        function configureStates(states) {
            states.forEach(function (state) {
                if (state.config.title) {
                    state.config.ncyBreadcrumb = {
                        label: state.config.title.toLowerCase()
                    }
                }

                $stateProvider.state(state.state, state.config);
            });
        }

        function states() {
            return $state.get();
        }

        function get(pattern) {
            var result = null;
            states().forEach(function (state) {
                if (state.name === pattern) {
                    result = state;
                }
            });
            return result;
        }

        function init() {
            updateDocTitle();
            $urlRouterProvider.otherwise('/index/dashboard');
        }

        function updateDocTitle() {
            $rootScope.$on('$stateChangeSuccess',
                function (event, current, previous) {
                    var title = routehelperConfig.config.title + (current.title ? ' | ' + current.title : '');
                    $rootScope.title = title; // data bind to <title>
                    $rootScope.$state = current;
                }
            );
        }

    }
})();
/**
 * notos.widgets
 * DIRECTIVE: ntFa
 */
(function () {
    'use strict';

    angular
        .module('notos.widgets')
        .directive('ntFa', ntFa);

    ntFa.$inject = [];

    function ntFa() {
        var directive = {
            restrict: 'E',
            link: linkFunc
        };

        return directive;
        //////////////////////

        function linkFunc(scope, element, attrs) {
            var i = angular.element('<i class="fa" />');
            var classes = attrs.name.split(' ');

            angular.forEach(classes, function (value) {
                i.addClass('fa-' + value);
            });

            element.replaceWith(i);
        }
    }
})();


/**
 * notos.widgets
 * DIRECTIVE: ntPagination
 */
(function () {
    'use strict';

    angular
        .module('notos.widgets')
        .directive('ntPagination', ntPagination);

    /* @ngInject */
    function ntPagination($compile) {
        var directive = {
            restrict: 'EA',
            scope: {
                totalItems: '=',
                itemsPerPage: '=',
                currentPage: '='
            },
            link: linkFunc,
            controller: PaginateController,
            controllerAs: 'vm',
            bindToController: true // because the scope is isolated
        };

        PaginateController.$inject = ["$scope"];
        return directive;
        //////////////////////

        function linkFunc(scope, element, attrs) {
            var pagination = angular.element('<pagination />')
            pagination.attr('data-boundary-links', true);
            pagination.attr('data-total-items', 'totalItems');
            pagination.attr('data-items-per-page', 'itemsPerPage');
            pagination.attr('data-max-size', 5);
            pagination.attr('data-ng-model', 'currentPage');
            pagination.attr('data-previous-text', '‹');
            pagination.attr('data-next-text', '›');
            pagination.attr('data-first-text', '«');
            pagination.attr('data-last-text', '»');
            pagination.attr('data-ng-hide', 'hide');
            if (attrs['class']) {
                pagination.attr('class', attrs['class']);
            }

            $compile(pagination)(scope);
            element.replaceWith(pagination);
        }

        /* @ngInject */
        function PaginateController($scope) {
            var vm = this;

            vm.hide = false;
            vm.itemsPerPage = 10;
            vm.currentPge = 0;

            $scope.$watch('vm.totalItems', function () {
                vm.hide = (vm.totalItems <= vm.itemsPerPage);
            });
        }
    }
    ntPagination.$inject = ["$compile"];
})();


/**
 * notos.widgets
 * FILTER: offset
 */
(function () {
    'use strict';

    angular
        .module('notos.widgets')
        .filter('offset', filter);


    function filter() {
        return function offset(input, start) {
            if (input) {
                start = parseInt(start, 10);
                return input.slice(start);
            }
            return [];
        };
    }
})();
//# sourceMappingURL=data:application/json;base64,